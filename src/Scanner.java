/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Lexer.lex</tt>
 */
public class Scanner implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\77\1\100\1\1\22\0\1\3\1\56\1\14"+
    "\1\5\1\0\1\67\1\62\1\15\1\43\1\44\1\65\1\64\1\52"+
    "\1\11\1\13\1\4\1\10\1\71\1\70\1\75\1\72\1\12\1\76"+
    "\1\73\1\74\1\12\1\61\1\51\1\55\1\53\1\54\1\60\1\0"+
    "\5\6\1\41\15\6\1\40\6\6\1\47\1\16\1\50\1\66\1\7"+
    "\1\0\1\24\1\17\1\22\1\36\1\27\1\32\1\6\1\23\1\34"+
    "\1\6\1\30\1\21\1\6\1\35\1\20\1\26\1\37\1\25\1\31"+
    "\1\33\1\42\5\6\1\45\1\63\1\46\1\57\6\0\1\77\u1fa2\0"+
    "\1\77\1\77\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\2\0\1\2\2\3\1\4\1\3\1\5\1\1"+
    "\1\6\1\1\1\7\1\10\1\11\14\5\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\2\42\1\43"+
    "\2\2\2\44\1\2\4\0\1\45\1\1\11\5\1\46"+
    "\1\5\1\47\3\5\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\10\60\2\0\1\72"+
    "\1\1\4\5\1\73\2\5\1\74\1\5\1\75\1\76"+
    "\2\5\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\0\1\1\1\107\1\5\1\110\1\111\1\112"+
    "\1\113\1\5\1\114\1\115\1\1\1\116\1\117\5\1"+
    "\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\303\0\u0145\0\u0186"+
    "\0\u01c7\0\u0208\0\u0249\0\u028a\0\303\0\303\0\303\0\u02cb"+
    "\0\u030c\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3"+
    "\0\u0514\0\u0555\0\u0596\0\u01c7\0\u01c7\0\303\0\303\0\303"+
    "\0\303\0\303\0\303\0\303\0\303\0\u05d7\0\u0618\0\u0659"+
    "\0\u069a\0\303\0\303\0\303\0\u06db\0\u071c\0\u075d\0\303"+
    "\0\303\0\303\0\u079e\0\u07df\0\303\0\303\0\u0820\0\u0861"+
    "\0\u08a2\0\303\0\u08e3\0\u0861\0\u0924\0\u0208\0\u0965\0\303"+
    "\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d"+
    "\0\u0bae\0\u0bef\0\u01c7\0\u0c30\0\u01c7\0\u0c71\0\u0cb2\0\u0cf3"+
    "\0\303\0\303\0\303\0\303\0\303\0\303\0\303\0\303"+
    "\0\303\0\303\0\303\0\303\0\303\0\303\0\303\0\303"+
    "\0\303\0\303\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79"+
    "\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0965\0\u0fbe\0\u0fff\0\u1040"+
    "\0\u1081\0\u10c2\0\u01c7\0\u1103\0\u1144\0\u01c7\0\u1185\0\u01c7"+
    "\0\u01c7\0\u11c6\0\u1207\0\303\0\303\0\303\0\303\0\303"+
    "\0\303\0\303\0\303\0\u1248\0\u1289\0\u01c7\0\u12ca\0\u01c7"+
    "\0\u01c7\0\u01c7\0\u01c7\0\u130b\0\u01c7\0\u01c7\0\u134c\0\u01c7"+
    "\0\u01c7\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u028a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\4\1\20\1\11"+
    "\1\21\1\22\2\11\1\23\1\24\1\25\1\11\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\11\1\34\1\35"+
    "\1\11\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\7\14\1\0"+
    "\1\6\1\63\1\64\1\65\11\63\1\66\1\63\1\67"+
    "\62\63\1\70\1\71\1\72\12\70\1\4\1\73\60\70"+
    "\2\74\103\0\1\6\103\0\1\75\73\0\1\10\1\5"+
    "\1\6\76\10\6\0\3\11\1\0\1\11\4\0\24\11"+
    "\25\0\7\11\12\0\1\76\1\0\1\76\1\77\54\0"+
    "\7\76\12\0\1\76\1\100\1\14\55\0\1\101\6\14"+
    "\12\0\1\14\1\0\1\14\1\77\54\0\7\14\10\0"+
    "\3\11\1\0\1\11\4\0\1\11\1\102\4\11\1\103"+
    "\15\11\25\0\7\11\10\0\3\11\1\0\1\11\4\0"+
    "\1\11\1\104\22\11\25\0\7\11\10\0\3\11\1\0"+
    "\1\11\4\0\4\11\1\105\17\11\25\0\7\11\10\0"+
    "\3\11\1\0\1\11\4\0\5\11\1\106\16\11\25\0"+
    "\7\11\10\0\3\11\1\0\1\11\4\0\1\11\1\107"+
    "\22\11\25\0\7\11\10\0\3\11\1\0\1\11\4\0"+
    "\2\11\1\110\21\11\25\0\7\11\10\0\3\11\1\0"+
    "\1\11\4\0\10\11\1\111\13\11\25\0\7\11\10\0"+
    "\3\11\1\0\1\11\4\0\2\11\1\112\12\11\1\113"+
    "\6\11\25\0\7\11\10\0\3\11\1\0\1\11\4\0"+
    "\1\11\1\114\22\11\25\0\7\11\10\0\3\11\1\0"+
    "\1\11\4\0\13\11\1\115\2\11\1\116\5\11\25\0"+
    "\7\11\10\0\3\11\1\0\1\11\4\0\23\11\1\117"+
    "\25\0\7\11\10\0\3\11\1\0\1\11\4\0\15\11"+
    "\1\120\6\11\25\0\7\11\55\0\1\121\1\122\77\0"+
    "\1\123\100\0\1\124\100\0\1\125\107\0\1\126\101\0"+
    "\1\127\101\0\1\130\14\0\1\63\2\0\11\63\1\0"+
    "\1\63\1\0\62\63\2\0\1\65\76\0\1\131\2\0"+
    "\11\131\1\132\1\133\1\134\1\135\5\131\1\136\4\131"+
    "\1\137\1\140\1\131\1\141\41\131\17\0\1\142\65\0"+
    "\1\72\76\0\1\131\2\0\11\131\1\143\1\144\1\145"+
    "\1\146\5\131\1\147\4\131\1\150\1\151\1\131\1\152"+
    "\41\131\2\0\5\153\1\154\73\153\10\0\1\155\1\0"+
    "\1\155\55\0\7\155\12\0\1\14\1\0\1\14\1\77"+
    "\54\0\1\14\1\156\5\14\10\0\3\11\1\0\1\11"+
    "\4\0\1\11\1\157\22\11\25\0\7\11\10\0\3\11"+
    "\1\0\1\11\4\0\10\11\1\160\13\11\25\0\7\11"+
    "\10\0\3\11\1\0\1\11\4\0\1\11\1\161\22\11"+
    "\25\0\7\11\10\0\3\11\1\0\1\11\4\0\5\11"+
    "\1\162\16\11\25\0\7\11\10\0\3\11\1\0\1\11"+
    "\4\0\14\11\1\163\7\11\25\0\7\11\10\0\3\11"+
    "\1\0\1\11\4\0\1\11\1\164\22\11\25\0\7\11"+
    "\10\0\3\11\1\0\1\11\4\0\12\11\1\165\11\11"+
    "\25\0\7\11\10\0\3\11\1\0\1\11\4\0\20\11"+
    "\1\166\3\11\25\0\7\11\10\0\3\11\1\0\1\11"+
    "\4\0\1\11\1\167\22\11\25\0\7\11\10\0\3\11"+
    "\1\0\1\11\4\0\7\11\1\170\14\11\25\0\7\11"+
    "\10\0\3\11\1\0\1\11\4\0\14\11\1\171\7\11"+
    "\25\0\7\11\10\0\3\11\1\0\1\11\4\0\2\11"+
    "\1\172\21\11\25\0\7\11\10\0\3\11\1\0\1\11"+
    "\4\0\3\11\1\173\20\11\25\0\7\11\17\0\1\174"+
    "\100\0\1\175\100\0\1\176\100\0\1\177\100\0\1\200"+
    "\100\0\1\201\100\0\1\202\100\0\1\203\63\0\5\153"+
    "\1\204\73\153\4\0\1\6\1\154\103\0\1\14\1\0"+
    "\1\14\1\77\54\0\2\14\1\205\4\14\10\0\3\11"+
    "\1\0\1\11\4\0\2\11\1\206\21\11\25\0\7\11"+
    "\10\0\3\11\1\0\1\11\4\0\5\11\1\207\16\11"+
    "\25\0\7\11\10\0\3\11\1\0\1\11\4\0\7\11"+
    "\1\210\14\11\25\0\7\11\10\0\3\11\1\0\1\11"+
    "\4\0\6\11\1\211\15\11\25\0\7\11\10\0\3\11"+
    "\1\0\1\11\4\0\2\11\1\212\21\11\25\0\7\11"+
    "\10\0\3\11\1\0\1\11\4\0\10\11\1\213\13\11"+
    "\25\0\7\11\10\0\3\11\1\0\1\11\4\0\5\11"+
    "\1\214\16\11\25\0\7\11\10\0\3\11\1\0\1\11"+
    "\4\0\2\11\1\215\21\11\25\0\7\11\10\0\3\11"+
    "\1\0\1\11\4\0\14\11\1\216\7\11\25\0\7\11"+
    "\2\0\4\153\1\6\1\204\73\153\10\0\1\14\1\0"+
    "\1\14\1\77\54\0\3\14\1\217\3\14\10\0\3\11"+
    "\1\0\1\11\4\0\11\11\1\220\12\11\25\0\7\11"+
    "\10\0\3\11\1\0\1\11\4\0\14\11\1\221\7\11"+
    "\25\0\7\11\12\0\1\14\1\0\1\14\1\77\54\0"+
    "\2\14\1\222\4\14\12\0\1\14\1\0\1\14\1\77"+
    "\54\0\4\14\1\223\2\14\12\0\1\14\1\0\1\14"+
    "\1\77\54\0\5\14\1\224\1\14\12\0\1\14\1\0"+
    "\1\14\1\77\54\0\6\14\1\225\12\0\1\14\1\0"+
    "\1\14\1\77\54\0\2\14\1\226\4\14\12\0\1\14"+
    "\1\0\1\14\1\77\54\0\4\14\1\227\2\14\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5330];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\0\1\11\1\1\1\11\6\1\3\11\16\1"+
    "\10\11\4\1\3\11\3\1\3\11\2\1\2\11\3\1"+
    "\1\11\1\1\4\0\1\11\20\1\22\11\10\1\2\0"+
    "\17\1\10\11\1\0\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();

  private Symbol symbol(int type) {
    return new JavaSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new JavaSymbol(type, yyline+1, yycolumn+1, value);
  }

  /**
   * assumes correct representation of a long value for
   * specified radix in scanner buffer from <code>start</code>
   * to <code>end</code>
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(INTEGER_LITERAL, new Integer(yytext()));
            }
          case 81: break;
          case 2: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
          case 82: break;
          case 3: 
            { /* ignore */
            }
          case 83: break;
          case 4: 
            { return symbol(DIV);
            }
          case 84: break;
          case 5: 
            { return symbol(IDENTIFIER, yytext());
            }
          case 85: break;
          case 6: 
            { return symbol(MINUS);
            }
          case 86: break;
          case 7: 
            { return symbol(DOT);
            }
          case 87: break;
          case 8: 
            { yybegin(STRING); string.setLength(0);
            }
          case 88: break;
          case 9: 
            { yybegin(CHARLITERAL);
            }
          case 89: break;
          case 10: 
            { return symbol(BOOLEAN_LITERAL, true);
            }
          case 90: break;
          case 11: 
            { return symbol(BOOLEAN_LITERAL, false);
            }
          case 91: break;
          case 12: 
            { return symbol(LPAREN);
            }
          case 92: break;
          case 13: 
            { return symbol(RPAREN);
            }
          case 93: break;
          case 14: 
            { return symbol(LBRACE);
            }
          case 94: break;
          case 15: 
            { return symbol(RBRACE);
            }
          case 95: break;
          case 16: 
            { return symbol(LBRACK);
            }
          case 96: break;
          case 17: 
            { return symbol(RBRACK);
            }
          case 97: break;
          case 18: 
            { return symbol(SEMICOLON);
            }
          case 98: break;
          case 19: 
            { return symbol(COMMA);
            }
          case 99: break;
          case 20: 
            { return symbol(EQ);
            }
          case 100: break;
          case 21: 
            { return symbol(GT);
            }
          case 101: break;
          case 22: 
            { return symbol(LT);
            }
          case 102: break;
          case 23: 
            { return symbol(NOT);
            }
          case 103: break;
          case 24: 
            { return symbol(COMP);
            }
          case 104: break;
          case 25: 
            { return symbol(QUESTION);
            }
          case 105: break;
          case 26: 
            { return symbol(COLON);
            }
          case 106: break;
          case 27: 
            { return symbol(AND);
            }
          case 107: break;
          case 28: 
            { return symbol(OR);
            }
          case 108: break;
          case 29: 
            { return symbol(PLUS);
            }
          case 109: break;
          case 30: 
            { return symbol(MULT);
            }
          case 110: break;
          case 31: 
            { return symbol(XOR);
            }
          case 111: break;
          case 32: 
            { return symbol(MOD);
            }
          case 112: break;
          case 33: 
            { string.append( yytext() );
            }
          case 113: break;
          case 34: 
            { throw new RuntimeException("Unterminated string at end of line");
            }
          case 114: break;
          case 35: 
            { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
            }
          case 115: break;
          case 36: 
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
          case 116: break;
          case 37: 
            { return symbol(MINUSMINUS);
            }
          case 117: break;
          case 38: 
            { return symbol(FI);
            }
          case 118: break;
          case 39: 
            { return symbol(IF);
            }
          case 119: break;
          case 40: 
            { return symbol(EQEQ);
            }
          case 120: break;
          case 41: 
            { return symbol(IMPLIES);
            }
          case 121: break;
          case 42: 
            { return symbol(GTEQ);
            }
          case 122: break;
          case 43: 
            { return symbol(LTEQ);
            }
          case 123: break;
          case 44: 
            { return symbol(NOTEQ);
            }
          case 124: break;
          case 45: 
            { return symbol(ANDAND);
            }
          case 125: break;
          case 46: 
            { return symbol(OROR);
            }
          case 126: break;
          case 47: 
            { return symbol(PLUSPLUS);
            }
          case 127: break;
          case 48: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          case 128: break;
          case 49: 
            { string.append( '\"' );
            }
          case 129: break;
          case 50: 
            { string.append( '\'' );
            }
          case 130: break;
          case 51: 
            { string.append( '\\' );
            }
          case 131: break;
          case 52: 
            { string.append( '\b' );
            }
          case 132: break;
          case 53: 
            { string.append( '\r' );
            }
          case 133: break;
          case 54: 
            { string.append( '\f' );
            }
          case 134: break;
          case 55: 
            { string.append( '\t' );
            }
          case 135: break;
          case 56: 
            { string.append( '\n' );
            }
          case 136: break;
          case 57: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yytext().charAt(0));
            }
          case 137: break;
          case 58: 
            { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
            }
          case 138: break;
          case 59: 
            { return symbol(RAT);
            }
          case 139: break;
          case 60: 
            { return symbol(SEQ);
            }
          case 140: break;
          case 61: 
            { return symbol(TOP);
            }
          case 141: break;
          case 62: 
            { return symbol(INT);
            }
          case 142: break;
          case 63: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\"');
            }
          case 143: break;
          case 64: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\'');
            }
          case 144: break;
          case 65: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\\');
            }
          case 145: break;
          case 66: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\b');
            }
          case 146: break;
          case 67: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\r');
            }
          case 147: break;
          case 68: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\f');
            }
          case 148: break;
          case 69: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\t');
            }
          case 149: break;
          case 70: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\n');
            }
          case 150: break;
          case 71: 
            { return symbol(BOOLEAN);
            }
          case 151: break;
          case 72: 
            { return symbol(LOOP);
            }
          case 152: break;
          case 73: 
            { return symbol(CHAR);
            }
          case 153: break;
          case 74: 
            { return symbol(POOL);
            }
          case 154: break;
          case 75: 
            { return symbol(ELSE);
            }
          case 155: break;
          case 76: 
            { return symbol(NULL_LITERAL);
            }
          case 156: break;
          case 77: 
            { return symbol(DICT);
            }
          case 157: break;
          case 78: 
            { return symbol(BREAK);
            }
          case 158: break;
          case 79: 
            { return symbol(FLOAT);
            }
          case 159: break;
          case 80: 
            { return symbol(INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
            }
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
