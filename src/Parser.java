
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\005\000\002\002\003\000\002\005\006" +
    "\000\002\005\006\000\002\005\006\000\002\005\010\000" +
    "\002\005\010\000\002\005\005\000\002\005\005\000\002" +
    "\005\006\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\003\007" +
    "\000\002\003\006\000\002\004\003\000\002\004\004\000" +
    "\002\012\005\000\002\013\010\000\002\014\005\000\002" +
    "\014\005\000\002\014\007\000\002\014\007\000\002\015" +
    "\012\000\002\015\015\000\002\010\011\000\002\010\012" +
    "\000\002\011\003\000\002\011\005\000\002\011\005\000" +
    "\002\011\004\000\002\006\005\000\002\006\005\000\002" +
    "\006\003\000\002\006\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\016\010\000\002\016" +
    "\010\000\002\016\010\000\002\016\010\000\002\017\006" +
    "\000\002\017\006\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\021\005\000\002\021\004\000\002\022" +
    "\005\000\002\022\007\000\002\023\005\000\002\023\007" +
    "\000\002\023\006\000\002\023\006\000\002\023\004\000" +
    "\002\024\003\000\002\024\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\030\003\000\002\030\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\026\005\005\006\022\007\012\011\015\014" +
    "\021\047\007\050\004\051\011\052\020\053\013\001\002" +
    "\000\004\053\013\001\002\000\004\053\013\001\002\000" +
    "\040\002\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\047\ufff3\050\ufff3\051\ufff3\052" +
    "\ufff3\053\ufff3\067\ufff3\001\002\000\004\053\013\001\002" +
    "\000\006\054\212\075\211\001\002\000\022\036\151\037" +
    "\163\040\161\041\160\042\153\043\155\044\164\045\157" +
    "\001\002\000\024\005\005\006\022\007\012\011\015\014" +
    "\021\047\007\050\004\051\011\053\013\001\002\000\032" +
    "\016\uffaf\017\uffaf\054\uffaf\064\uffaf\065\uffaf\066\uffaf\067" +
    "\uffaf\072\uffaf\073\uffaf\074\145\075\uffaf\076\uffaf\001\002" +
    "\000\026\002\ufffd\005\005\006\022\007\012\011\015\014" +
    "\021\047\007\050\004\051\011\053\013\001\002\000\004" +
    "\064\124\001\002\000\004\002\123\001\002\000\040\002" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053" +
    "\ufff1\067\ufff1\001\002\000\004\066\115\001\002\000\040" +
    "\002\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\013" +
    "\ufff4\014\ufff4\015\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4" +
    "\053\ufff4\067\ufff4\001\002\000\026\053\013\055\033\057" +
    "\051\060\041\061\050\062\036\063\037\064\047\066\032" +
    "\070\044\001\002\000\026\005\005\006\022\007\012\011" +
    "\015\014\021\047\007\050\004\051\011\052\020\053\013" +
    "\001\002\000\040\002\ufff0\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\013\ufff0\014\ufff0\015\ufff0\047\ufff0\050\ufff0" +
    "\051\ufff0\052\ufff0\053\ufff0\067\ufff0\001\002\000\032\002" +
    "\uffed\005\uffed\006\uffed\007\uffed\011\uffed\014\uffed\047\uffed" +
    "\050\uffed\051\uffed\052\uffed\053\uffed\067\uffed\001\002\000" +
    "\040\002\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\013\ufff2\014\ufff2\015\ufff2\047\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\053\ufff2\067\ufff2\001\002\000\032\002\uffec\005\uffec" +
    "\006\uffec\007\uffec\011\uffec\014\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\067\uffec\001\002\000\026\002\uffff" +
    "\005\005\006\022\007\012\011\015\014\021\047\007\050" +
    "\004\051\011\053\013\001\002\000\026\002\ufffe\005\005" +
    "\006\022\007\012\011\015\014\021\047\007\050\004\051" +
    "\011\053\013\001\002\000\020\055\033\057\051\060\041" +
    "\061\050\062\036\063\037\067\107\001\002\000\024\016" +
    "\uffd0\017\uffd0\065\uffd0\067\uffd0\071\uffd0\072\uffd0\073\uffd0" +
    "\075\uffd0\076\uffd0\001\002\000\012\016\uffda\017\uffda\065" +
    "\uffda\072\uffda\001\002\000\014\016\uffd9\017\uffd9\065\uffd9" +
    "\072\uffd9\076\101\001\002\000\024\016\uffd2\017\uffd2\065" +
    "\uffd2\067\uffd2\071\uffd2\072\uffd2\073\uffd2\075\uffd2\076\uffd2" +
    "\001\002\000\024\016\uffd1\017\uffd1\065\uffd1\067\uffd1\071" +
    "\uffd1\072\uffd1\073\uffd1\075\uffd1\076\uffd1\001\002\000\012" +
    "\016\uffd8\017\uffd8\065\uffd8\072\uffd8\001\002\000\024\016" +
    "\uffd4\017\uffd4\065\uffd4\067\uffd4\071\uffd4\072\uffd4\073\uffd4" +
    "\075\uffd4\076\uffd4\001\002\000\014\016\uffd6\017\uffd6\065" +
    "\uffd6\072\uffd6\076\075\001\002\000\006\016\054\072\074" +
    "\001\002\000\022\055\033\057\051\060\041\061\050\062" +
    "\036\063\037\071\061\075\056\001\002\000\012\016\uffdb" +
    "\017\uffdb\065\uffdb\072\uffdb\001\002\000\012\016\uffd7\017" +
    "\uffd7\065\uffd7\072\uffd7\001\002\000\026\053\013\055\033" +
    "\057\051\060\041\061\050\062\036\063\037\064\047\066" +
    "\032\070\044\001\002\000\024\016\uffd3\017\uffd3\065\uffd3" +
    "\067\uffd3\071\uffd3\072\uffd3\073\uffd3\075\uffd3\076\uffd3\001" +
    "\002\000\024\016\uffd5\017\uffd5\065\uffd5\067\uffd5\071\uffd5" +
    "\072\uffd5\073\uffd5\075\uffd5\076\uffd5\001\002\000\006\016" +
    "\054\065\053\001\002\000\012\016\uffdc\017\uffdc\065\uffdc" +
    "\072\uffdc\001\002\000\026\053\013\055\033\057\051\060" +
    "\041\061\050\062\036\063\037\064\047\066\032\070\044" +
    "\001\002\000\012\016\uffdd\017\uffdd\065\uffdd\072\uffdd\001" +
    "\002\000\016\055\033\057\051\060\041\061\050\062\036" +
    "\063\037\001\002\000\004\071\071\001\002\000\010\071" +
    "\uffb7\073\062\075\063\001\002\000\012\016\uffb8\017\uffb8" +
    "\065\uffb8\072\uffb8\001\002\000\016\055\033\057\051\060" +
    "\041\061\050\062\036\063\037\001\002\000\020\055\033" +
    "\057\051\060\041\061\050\062\036\063\037\071\064\001" +
    "\002\000\012\016\uffba\017\uffba\065\uffba\072\uffba\001\002" +
    "\000\004\071\066\001\002\000\012\016\uffbb\017\uffbb\065" +
    "\uffbb\072\uffbb\001\002\000\004\071\uffb6\001\002\000\006" +
    "\071\uffb7\073\062\001\002\000\012\016\uffbc\017\uffbc\065" +
    "\uffbc\072\uffbc\001\002\000\004\071\073\001\002\000\012" +
    "\016\uffb9\017\uffb9\065\uffb9\072\uffb9\001\002\000\040\002" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053" +
    "\ufff6\067\ufff6\001\002\000\020\053\013\055\033\057\051" +
    "\060\041\061\050\062\036\063\037\001\002\000\014\016" +
    "\uffb4\017\uffb4\065\uffb4\072\uffb4\076\101\001\002\000\014" +
    "\016\uffb5\017\uffb5\065\uffb5\072\uffb5\076\075\001\002\000" +
    "\012\016\uffb1\017\uffb1\065\uffb1\072\uffb1\001\002\000\020" +
    "\053\013\055\033\057\051\060\041\061\050\062\036\063" +
    "\037\001\002\000\014\016\uffb2\017\uffb2\065\uffb2\072\uffb2" +
    "\076\101\001\002\000\014\016\uffb3\017\uffb3\065\uffb3\072" +
    "\uffb3\076\075\001\002\000\012\016\uffb0\017\uffb0\065\uffb0" +
    "\072\uffb0\001\002\000\004\075\111\001\002\000\004\067" +
    "\110\001\002\000\012\016\uffbf\017\uffbf\065\uffbf\072\uffbf" +
    "\001\002\000\012\016\uffc0\017\uffc0\065\uffc0\072\uffc0\001" +
    "\002\000\016\055\033\057\051\060\041\061\050\062\036" +
    "\063\037\001\002\000\006\067\uffbe\073\113\001\002\000" +
    "\016\055\033\057\051\060\041\061\050\062\036\063\037" +
    "\001\002\000\004\067\uffbd\001\002\000\026\005\005\006" +
    "\022\007\012\011\015\014\021\047\007\050\004\051\011" +
    "\053\013\067\117\001\002\000\026\005\005\006\022\007" +
    "\012\011\015\014\021\047\007\050\004\051\011\053\013" +
    "\067\121\001\002\000\004\072\120\001\002\000\026\002" +
    "\uffee\005\uffee\006\uffee\007\uffee\011\uffee\014\uffee\047\uffee" +
    "\050\uffee\051\uffee\053\uffee\001\002\000\004\072\122\001" +
    "\002\000\026\002\uffef\005\uffef\006\uffef\007\uffef\011\uffef" +
    "\014\uffef\047\uffef\050\uffef\051\uffef\053\uffef\001\002\000" +
    "\004\002\000\001\002\000\030\020\130\053\013\055\126" +
    "\057\051\060\041\061\050\062\036\063\037\064\047\066" +
    "\032\070\044\001\002\000\006\016\141\017\140\001\002" +
    "\000\012\016\uffd0\017\uffd0\065\uffe1\076\uffd0\001\002\000" +
    "\004\065\132\001\002\000\030\020\130\053\013\055\126" +
    "\057\051\060\041\061\050\062\036\063\037\064\047\066" +
    "\032\070\044\001\002\000\004\065\uffde\001\002\000\004" +
    "\012\133\001\002\000\024\005\005\006\022\007\012\011" +
    "\015\014\021\047\007\050\004\051\011\053\013\001\002" +
    "\000\006\013\135\015\136\001\002\000\040\002\uffe3\005" +
    "\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\067" +
    "\uffe3\001\002\000\004\013\137\001\002\000\040\002\uffe2" +
    "\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2" +
    "\067\uffe2\001\002\000\026\053\013\055\033\057\051\060" +
    "\041\061\050\062\036\063\037\064\047\066\032\070\044" +
    "\001\002\000\026\053\013\055\033\057\051\060\041\061" +
    "\050\062\036\063\037\064\047\066\032\070\044\001\002" +
    "\000\010\016\uffdd\017\uffdd\065\uffdf\001\002\000\006\016" +
    "\054\065\uffe0\001\002\000\026\002\001\005\005\006\022" +
    "\007\012\011\015\014\021\047\007\050\004\051\011\053" +
    "\013\001\002\000\004\053\013\001\002\000\030\016\uffae" +
    "\017\uffae\054\uffae\064\uffae\065\uffae\066\uffae\067\uffae\072" +
    "\uffae\073\uffae\075\uffae\076\uffae\001\002\000\004\010\150" +
    "\001\002\000\040\002\uffeb\005\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\011\uffeb\013\uffeb\014\uffeb\015\uffeb\047\uffeb\050\uffeb" +
    "\051\uffeb\052\uffeb\053\uffeb\067\uffeb\001\002\000\020\022" +
    "\uffc4\053\uffc4\054\uffc4\065\uffc4\067\uffc4\072\uffc4\073\uffc4" +
    "\001\002\000\016\053\uffcf\054\uffcf\065\uffcf\067\uffcf\072" +
    "\uffcf\073\uffcf\001\002\000\004\023\174\001\002\000\016" +
    "\053\uffce\054\uffce\065\uffce\067\uffce\072\uffce\073\uffce\001" +
    "\002\000\020\022\uffc1\053\uffc1\054\uffc1\065\uffc1\067\uffc1" +
    "\072\uffc1\073\uffc1\001\002\000\016\053\uffcd\054\uffcd\065" +
    "\uffcd\067\uffcd\072\uffcd\073\uffcd\001\002\000\020\022\uffc5" +
    "\053\uffc5\054\uffc5\065\uffc5\067\uffc5\072\uffc5\073\uffc5\001" +
    "\002\000\004\023\167\001\002\000\020\022\uffc2\053\uffc2" +
    "\054\uffc2\065\uffc2\067\uffc2\072\uffc2\073\uffc2\001\002\000" +
    "\004\053\013\001\002\000\020\022\uffc3\053\uffc3\054\uffc3" +
    "\065\uffc3\067\uffc3\072\uffc3\073\uffc3\001\002\000\020\022" +
    "\uffc6\053\uffc6\054\uffc6\065\uffc6\067\uffc6\072\uffc6\073\uffc6" +
    "\001\002\000\004\072\166\001\002\000\040\002\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\067" +
    "\ufff5\001\002\000\020\036\151\037\163\040\161\043\155" +
    "\044\164\045\157\046\171\001\002\000\004\022\173\001" +
    "\002\000\004\022\172\001\002\000\016\053\uffc7\054\uffc7" +
    "\065\uffc7\067\uffc7\072\uffc7\073\uffc7\001\002\000\016\053" +
    "\uffc8\054\uffc8\065\uffc8\067\uffc8\072\uffc8\073\uffc8\001\002" +
    "\000\020\036\151\037\163\040\161\043\155\044\164\045" +
    "\157\046\176\001\002\000\004\073\204\001\002\000\004" +
    "\073\177\001\002\000\020\036\151\037\163\040\161\043" +
    "\155\044\164\045\157\046\201\001\002\000\004\022\203" +
    "\001\002\000\004\022\202\001\002\000\016\053\uffcb\054" +
    "\uffcb\065\uffcb\067\uffcb\072\uffcb\073\uffcb\001\002\000\016" +
    "\053\uffca\054\uffca\065\uffca\067\uffca\072\uffca\073\uffca\001" +
    "\002\000\020\036\151\037\163\040\161\043\155\044\164" +
    "\045\157\046\206\001\002\000\004\022\210\001\002\000" +
    "\004\022\207\001\002\000\016\053\uffc9\054\uffc9\065\uffc9" +
    "\067\uffc9\072\uffc9\073\uffc9\001\002\000\016\053\uffcc\054" +
    "\uffcc\065\uffcc\067\uffcc\072\uffcc\073\uffcc\001\002\000\024" +
    "\036\151\037\163\040\161\041\160\042\153\043\155\044" +
    "\164\045\157\053\013\001\002\000\026\053\013\055\033" +
    "\057\051\060\041\061\050\062\036\063\037\064\047\066" +
    "\032\070\044\001\002\000\006\016\054\072\214\001\002" +
    "\000\040\002\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\047\ufffc\050\ufffc\051\ufffc" +
    "\052\ufffc\053\ufffc\067\ufffc\001\002\000\006\054\224\072" +
    "\223\001\002\000\006\054\220\072\217\001\002\000\040" +
    "\002\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\053\ufffb\067\ufffb\001\002\000\026\053\013\055\033\057" +
    "\051\060\041\061\050\062\036\063\037\064\047\066\032" +
    "\070\044\001\002\000\006\016\054\072\222\001\002\000" +
    "\040\002\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\013\ufff9\014\ufff9\015\ufff9\047\ufff9\050\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\067\ufff9\001\002\000\040\002\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\013\ufffa\014\ufffa\015" +
    "\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\067\ufffa" +
    "\001\002\000\026\053\013\055\033\057\051\060\041\061" +
    "\050\062\036\063\037\064\047\066\032\070\044\001\002" +
    "\000\006\016\054\072\226\001\002\000\040\002\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\067" +
    "\ufff8\001\002\000\004\066\230\001\002\000\004\053\013" +
    "\001\002\000\004\075\235\001\002\000\004\067\233\001" +
    "\002\000\004\072\234\001\002\000\040\002\uffea\005\uffea" +
    "\006\uffea\007\uffea\010\uffea\011\uffea\013\uffea\014\uffea\015" +
    "\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\067\uffea" +
    "\001\002\000\024\036\151\037\163\040\161\041\160\042" +
    "\153\043\155\044\164\045\157\053\013\001\002\000\010" +
    "\065\uffe9\067\uffe9\073\242\001\002\000\010\065\uffe8\067" +
    "\uffe8\073\240\001\002\000\004\053\013\001\002\000\006" +
    "\065\uffe6\067\uffe6\001\002\000\004\053\013\001\002\000" +
    "\006\065\uffe7\067\uffe7\001\002\000\004\072\245\001\002" +
    "\000\040\002\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\047\ufff7\050\ufff7\051\ufff7" +
    "\052\ufff7\053\ufff7\067\ufff7\001\002\000\004\064\247\001" +
    "\002\000\004\053\013\001\002\000\004\065\251\001\002" +
    "\000\004\066\252\001\002\000\024\005\005\006\022\007" +
    "\012\011\015\014\021\047\007\050\004\051\011\053\013" +
    "\001\002\000\026\005\005\006\022\007\012\011\015\014" +
    "\021\047\007\050\004\051\011\053\013\067\254\001\002" +
    "\000\042\002\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\047\uffe5\050\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\067\uffe5\075\255\001\002\000\022\036" +
    "\151\037\163\040\161\041\160\042\153\043\155\044\164" +
    "\045\157\001\002\000\004\072\257\001\002\000\040\002" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\067\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\024\002\015\003\013\004\022\005\024\010" +
    "\016\012\023\013\005\015\025\030\007\001\001\000\004" +
    "\030\245\001\001\000\004\030\243\001\001\000\002\001" +
    "\001\000\004\030\226\001\001\000\002\001\001\000\012" +
    "\016\151\017\153\020\155\026\161\001\001\000\016\005" +
    "\146\010\016\012\023\013\005\015\025\030\007\001\001" +
    "\000\002\001\001\000\020\004\143\005\024\010\016\012" +
    "\023\013\005\015\025\030\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\042\007\033\021\037\023\045" +
    "\025\034\027\044\030\041\001\001\000\020\003\027\005" +
    "\026\010\016\012\023\013\005\015\025\030\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\030\005\024\010\016\012\023" +
    "\013\005\015\025\030\007\001\001\000\016\005\026\010" +
    "\016\012\023\013\005\015\025\030\007\001\001\000\006" +
    "\022\105\025\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\056\025\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\051\007\033\021" +
    "\037\023\045\025\034\027\044\030\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\054\007\033\021\037\023\045\025\034" +
    "\027\044\030\041\001\001\000\002\001\001\000\004\025" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\066\025\067\001\001\000\004\025" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\025\075\027\077\030\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\101" +
    "\027\103\030\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\111\001" +
    "\001\000\002\001\001\000\006\022\113\025\104\001\001" +
    "\000\002\001\001\000\020\004\115\005\024\010\016\012" +
    "\023\013\005\015\025\030\007\001\001\000\016\005\026" +
    "\010\016\012\023\013\005\015\025\030\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\124\007\033\011" +
    "\126\021\037\023\045\025\034\027\044\030\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\124\007\033\011\130\021\037\023\045\025\034" +
    "\027\044\030\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\133\010\016\012\023\013\005\015\025" +
    "\030\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\142\007\033" +
    "\021\037\023\045\025\034\027\044\030\041\001\001\000" +
    "\020\006\141\007\033\021\037\023\045\025\034\027\044" +
    "\030\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\026\010\016\012\023\013\005\015\025\030\007" +
    "\001\001\000\004\030\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\016\151\017\153\020\155\026\215\030" +
    "\214\001\001\000\020\006\212\007\033\021\037\023\045" +
    "\025\034\027\044\030\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\220\007\033\021\037\023\045\025" +
    "\034\027\044\030\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\224\007\033\021" +
    "\037\023\045\025\034\027\044\030\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\231\030\230\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\016\151\017" +
    "\153\020\155\026\236\030\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\240\030\230\001\001\000" +
    "\002\001\001\000\006\014\242\030\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\247\030\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\252\005\024\010\016\012" +
    "\023\013\005\015\025\030\007\001\001\000\016\005\026" +
    "\010\016\012\023\013\005\015\025\030\007\001\001\000" +
    "\002\001\001\000\012\016\151\017\153\020\155\026\255" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors;

  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    lexer = lex;
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= main function_inner 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= function_inner main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= function_inner main function_inner 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= identifier ASSIGN expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= identifier COLON all_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= identifier COLON identifier SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= identifier COLON all_types ASSIGN expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= identifier COLON identifier ASSIGN expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= READ identifier SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= PRINT expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= ALIAS all_types identifier SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= typedef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= funcdef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= cond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // main ::= MAIN LBRACE function_inner RBRACE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // main ::= MAIN LBRACE RBRACE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function_inner ::= stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_inner",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_inner ::= function_inner stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_inner",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // loop ::= LOOP stmt POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // typedef ::= TDEF identifier LBRACE typedef_inner RBRACE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedef",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // typedef_inner ::= identifier COLON identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedef_inner",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // typedef_inner ::= identifier COLON all_types 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedef_inner",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // typedef_inner ::= identifier COLON identifier COMMA typedef_inner 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedef_inner",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // typedef_inner ::= identifier COLON all_types COMMA typedef_inner 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedef_inner",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcdef ::= FDEF identifier LPAREN typedef_inner RPAREN LBRACE function_inner RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdef",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcdef ::= FDEF identifier LPAREN typedef_inner RPAREN LBRACE function_inner RBRACE COLON all_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdef",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cond ::= IF LPAREN cond_inner RPAREN THEN stmt FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cond ::= IF LPAREN cond_inner RPAREN THEN stmt ELSE FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cond_inner ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_inner",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cond_inner ::= expr BBINOP expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_inner",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cond_inner ::= expr BINOP expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_inner",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cond_inner ::= BUNOP cond_inner 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_inner",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr BINOP expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= seq_concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // term ::= all_literals 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // term ::= dict_literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // term ::= seq_literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // term ::= identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // all_literals ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_literals",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // all_literals ::= FLOATING_POINT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_literals",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // all_literals ::= RATIONAL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_literals",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // all_literals ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_literals",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // all_literals ::= CHARACTER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_literals",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // all_literals ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_literals",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // all_types ::= dict_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // all_types ::= seq_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // all_types ::= primitive 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dict_type ::= DICT LT primitive COMMA primitive GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dict_type ::= DICT LT TOP COMMA TOP GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dict_type ::= DICT LT TOP COMMA primitive GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dict_type ::= DICT LT primitive COMMA TOP GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // seq_type ::= SEQ LT primitive GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // seq_type ::= SEQ LT TOP GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // primitive ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // primitive ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // primitive ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // primitive ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // primitive ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // primitive ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // dict_literal ::= LBRACE dict_literal_inner RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_literal",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // dict_literal ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_literal",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // dict_literal_inner ::= all_literals COLON all_literals 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_literal_inner",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dict_literal_inner ::= all_literals COLON all_literals COMMA dict_literal_inner 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_literal_inner",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // seq_literal ::= LBRACK seq_literal_inner RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_literal",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // seq_literal ::= LBRACK all_literals COLON all_literals RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_literal",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // seq_literal ::= LBRACK all_literals COLON RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_literal",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // seq_literal ::= LBRACK COLON all_literals RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_literal",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // seq_literal ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_literal",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // seq_literal_inner ::= all_literals 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_literal_inner",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // seq_literal_inner ::= all_literals COMMA seq_literal_inner 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_literal_inner",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // seq_concat ::= identifier COLONCOLON identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_concat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // seq_concat ::= identifier COLONCOLON all_literals 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_concat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // seq_concat ::= all_literals COLONCOLON identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_concat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // seq_concat ::= all_literals COLONCOLON all_literals 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_concat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // seq_concat ::= identifier COLONCOLON seq_concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_concat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // seq_concat ::= all_literals COLONCOLON seq_concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_concat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // identifier ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // identifier ::= IDENTIFIER DOT identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
