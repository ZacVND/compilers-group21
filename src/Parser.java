
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\005\000\002\002\003\000\002\005\006" +
    "\000\002\005\006\000\002\005\006\000\002\005\010\000" +
    "\002\005\010\000\002\005\004\000\002\005\005\000\002" +
    "\005\005\000\002\005\006\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\005\000\002\005\004\000\002\003\007\000" +
    "\002\004\003\000\002\004\004\000\002\013\005\000\002" +
    "\014\010\000\002\015\005\000\002\015\005\000\002\015" +
    "\007\000\002\015\007\000\002\016\012\000\002\016\015" +
    "\000\002\017\011\000\002\011\011\000\002\011\012\000" +
    "\002\012\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\004\000\002\007\003\000\002\007\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\003\000\002\006\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\005\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\020\010\000" +
    "\002\020\010\000\002\020\010\000\002\020\010\000\002" +
    "\021\006\000\002\021\006\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\023\005\000\002\023\004\000" +
    "\002\024\005\000\002\024\007\000\002\025\005\000\002" +
    "\025\007\000\002\025\006\000\002\025\006\000\002\025" +
    "\004\000\002\026\003\000\002\026\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\032\003\000\002" +
    "\032\005\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\032\005\005\006\025\007\024\010\013\011" +
    "\012\013\017\016\023\046\007\047\004\050\011\051\022" +
    "\052\014\001\002\000\004\052\014\001\002\000\004\052" +
    "\014\001\002\000\044\002\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\066\ufff2" +
    "\001\002\000\004\052\014\001\002\000\006\053\241\074" +
    "\240\001\002\000\022\035\200\036\212\037\210\040\207" +
    "\041\202\042\204\043\213\044\205\001\002\000\030\005" +
    "\005\006\025\007\024\010\013\011\012\013\017\016\023" +
    "\046\007\047\004\050\011\052\014\001\002\000\032\007" +
    "\024\052\014\054\040\056\054\057\053\060\041\061\047" +
    "\062\055\063\043\065\044\067\037\071\173\001\002\000" +
    "\050\007\uffa8\020\uffa8\021\uffa8\023\uffa8\024\uffa8\025\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\053\uffa8\063\uffa8\064\uffa8\065" +
    "\uffa8\066\uffa8\071\uffa8\072\uffa8\073\171\074\uffa8\075\uffa8" +
    "\001\002\000\032\002\ufffd\005\005\006\025\007\024\010" +
    "\013\011\012\013\017\016\023\046\007\047\004\050\011" +
    "\052\014\001\002\000\004\071\167\001\002\000\004\063" +
    "\141\001\002\000\004\002\140\001\002\000\044\002\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\015\ufff0\016\ufff0\017\ufff0\046\ufff0\047\ufff0\050\ufff0" +
    "\051\ufff0\052\ufff0\066\ufff0\001\002\000\004\065\134\001" +
    "\002\000\044\002\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\046" +
    "\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\066\ufff3\001\002" +
    "\000\030\007\024\052\014\054\040\056\054\057\053\060" +
    "\041\061\047\062\055\063\043\065\044\067\037\001\002" +
    "\000\030\007\024\052\014\054\040\056\054\057\053\060" +
    "\041\061\047\062\055\063\043\065\044\067\037\001\002" +
    "\000\032\005\005\006\025\007\024\010\013\011\012\013" +
    "\017\016\023\046\007\047\004\050\011\051\022\052\014" +
    "\001\002\000\044\002\uffef\005\uffef\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017\uffef" +
    "\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef\066\uffef\001" +
    "\002\000\036\002\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\013\uffeb\016\uffeb\046\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\052\uffeb\066\uffeb\001\002\000\044\002\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1" +
    "\052\ufff1\066\ufff1\001\002\000\032\002\uffff\005\005\006" +
    "\025\007\024\010\013\011\012\013\017\016\023\046\007" +
    "\047\004\050\011\052\014\001\002\000\036\002\uffea\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\013\uffea\016\uffea" +
    "\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea\066\uffea\001" +
    "\002\000\032\002\ufffe\005\005\006\025\007\024\010\013" +
    "\011\012\013\017\016\023\046\007\047\004\050\011\052" +
    "\014\001\002\000\010\020\100\021\101\071\122\001\002" +
    "\000\034\007\uffd1\020\uffd1\021\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\064\uffd1\071\uffd1\072\uffd1" +
    "\075\062\001\002\000\022\054\040\056\054\057\053\060" +
    "\041\061\047\062\055\070\107\074\104\001\002\000\042" +
    "\007\uffc9\020\uffc9\021\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\064\uffc9\066\uffc9\070\uffc9\071\uffc9" +
    "\072\uffc9\074\uffc9\075\uffc9\001\002\000\042\007\uffcc\020" +
    "\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\064\uffcc\066\uffcc\070\uffcc\071\uffcc\072\uffcc\074" +
    "\uffcc\075\uffcc\001\002\000\032\007\uffd0\020\uffd0\021\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\064" +
    "\uffd0\071\uffd0\072\uffd0\001\002\000\030\007\024\052\014" +
    "\054\040\056\054\057\053\060\041\061\047\062\055\063" +
    "\043\065\044\067\037\001\002\000\020\054\040\056\054" +
    "\057\053\060\041\061\047\062\055\066\070\001\002\000" +
    "\032\007\uffd2\020\uffd2\021\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\064\uffd2\071\uffd2\072\uffd2\001" +
    "\002\000\032\007\uffd3\020\uffd3\021\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\064\uffd3\071\uffd3\072" +
    "\uffd3\001\002\000\042\007\uffcb\020\uffcb\021\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\064\uffcb\066" +
    "\uffcb\070\uffcb\071\uffcb\072\uffcb\074\uffcb\075\uffcb\001\002" +
    "\000\034\007\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\064\uffd4\071\uffd4\072\uffd4" +
    "\075\056\001\002\000\032\007\uffd5\020\uffd5\021\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\064\uffd5" +
    "\071\uffd5\072\uffd5\001\002\000\032\007\uffd6\020\uffd6\021" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\064\uffd6\071\uffd6\072\uffd6\001\002\000\042\007\uffcd\020" +
    "\uffcd\021\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\064\uffcd\066\uffcd\070\uffcd\071\uffcd\072\uffcd\074" +
    "\uffcd\075\uffcd\001\002\000\042\007\uffce\020\uffce\021\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\064" +
    "\uffce\066\uffce\070\uffce\071\uffce\072\uffce\074\uffce\075\uffce" +
    "\001\002\000\042\007\uffca\020\uffca\021\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\030\uffca\064\uffca\066\uffca" +
    "\070\uffca\071\uffca\072\uffca\074\uffca\075\uffca\001\002\000" +
    "\020\052\014\054\040\056\054\057\053\060\041\061\047" +
    "\062\055\001\002\000\034\007\uffab\020\uffab\021\uffab\023" +
    "\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\064\uffab" +
    "\071\uffab\072\uffab\075\056\001\002\000\034\007\uffac\020" +
    "\uffac\021\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac" +
    "\030\uffac\064\uffac\071\uffac\072\uffac\075\062\001\002\000" +
    "\032\007\uffa9\020\uffa9\021\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\026\uffa9\027\uffa9\030\uffa9\064\uffa9\071\uffa9\072\uffa9\001" +
    "\002\000\020\052\014\054\040\056\054\057\053\060\041" +
    "\061\047\062\055\001\002\000\034\007\uffad\020\uffad\021" +
    "\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad" +
    "\064\uffad\071\uffad\072\uffad\075\056\001\002\000\034\007" +
    "\uffae\020\uffae\021\uffae\023\uffae\024\uffae\025\uffae\026\uffae" +
    "\027\uffae\030\uffae\064\uffae\071\uffae\072\uffae\075\062\001" +
    "\002\000\032\007\uffaa\020\uffaa\021\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\026\uffaa\027\uffaa\030\uffaa\064\uffaa\071\uffaa\072" +
    "\uffaa\001\002\000\004\074\072\001\002\000\004\066\071" +
    "\001\002\000\032\007\uffb8\020\uffb8\021\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\064\uffb8\071\uffb8" +
    "\072\uffb8\001\002\000\032\007\uffb9\020\uffb9\021\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\064\uffb9" +
    "\071\uffb9\072\uffb9\001\002\000\016\054\040\056\054\057" +
    "\053\060\041\061\047\062\055\001\002\000\006\066\uffb7" +
    "\072\074\001\002\000\016\054\040\056\054\057\053\060" +
    "\041\061\047\062\055\001\002\000\004\066\uffb6\001\002" +
    "\000\010\020\100\021\101\064\077\001\002\000\032\007" +
    "\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\064\uffd7\071\uffd7\072\uffd7\001\002\000" +
    "\030\007\024\052\014\054\040\056\054\057\053\060\041" +
    "\061\047\062\055\063\043\065\044\067\037\001\002\000" +
    "\030\007\024\052\014\054\040\056\054\057\053\060\041" +
    "\061\047\062\055\063\043\065\044\067\037\001\002\000" +
    "\032\007\uffcf\020\uffcf\021\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\064\uffcf\071\uffcf\072\uffcf\001" +
    "\002\000\032\007\uffd8\020\uffd8\021\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\064\uffd8\071\uffd8\072" +
    "\uffd8\001\002\000\016\054\040\056\054\057\053\060\041" +
    "\061\047\062\055\001\002\000\004\070\117\001\002\000" +
    "\010\070\uffb0\072\110\074\111\001\002\000\032\007\uffb1" +
    "\020\uffb1\021\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\064\uffb1\071\uffb1\072\uffb1\001\002\000\016" +
    "\054\040\056\054\057\053\060\041\061\047\062\055\001" +
    "\002\000\020\054\040\056\054\057\053\060\041\061\047" +
    "\062\055\070\112\001\002\000\032\007\uffb3\020\uffb3\021" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\064\uffb3\071\uffb3\072\uffb3\001\002\000\004\070\114\001" +
    "\002\000\032\007\uffb4\020\uffb4\021\uffb4\023\uffb4\024\uffb4" +
    "\025\uffb4\026\uffb4\027\uffb4\030\uffb4\064\uffb4\071\uffb4\072" +
    "\uffb4\001\002\000\004\070\uffaf\001\002\000\006\070\uffb0" +
    "\072\110\001\002\000\032\007\uffb5\020\uffb5\021\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\064\uffb5" +
    "\071\uffb5\072\uffb5\001\002\000\004\070\121\001\002\000" +
    "\032\007\uffb2\020\uffb2\021\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\064\uffb2\071\uffb2\072\uffb2\001" +
    "\002\000\044\002\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\015\ufff5\016\ufff5\017\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\066\ufff5\001\002" +
    "\000\010\007\124\020\100\021\101\001\002\000\004\052" +
    "\125\001\002\000\004\063\126\001\002\000\030\007\024" +
    "\052\014\054\040\056\054\057\053\060\041\061\047\062" +
    "\055\063\043\065\044\067\037\001\002\000\012\020\100" +
    "\021\101\064\uffda\072\132\001\002\000\004\064\131\001" +
    "\002\000\032\007\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\064\uffe1\071\uffe1\072" +
    "\uffe1\001\002\000\030\007\024\052\014\054\040\056\054" +
    "\057\053\060\041\061\047\062\055\063\043\065\044\067" +
    "\037\001\002\000\004\064\uffd9\001\002\000\030\005\005" +
    "\006\025\007\024\010\013\011\012\013\017\016\023\046" +
    "\007\047\004\050\011\052\014\001\002\000\032\005\005" +
    "\006\025\007\024\010\013\011\012\013\017\016\023\046" +
    "\007\047\004\050\011\052\014\066\136\001\002\000\004" +
    "\071\137\001\002\000\032\002\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\013\uffec\016\uffec\046\uffec\047\uffec" +
    "\050\uffec\052\uffec\001\002\000\004\002\000\001\002\000" +
    "\032\007\024\022\145\052\014\054\143\056\054\057\053" +
    "\060\041\061\047\062\055\063\043\065\044\067\037\001" +
    "\002\000\022\020\100\021\155\023\157\024\161\025\163" +
    "\026\164\027\162\030\156\001\002\000\026\020\uffc9\021" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\064\uffde\075\uffc9\001\002\000\004\064\147\001\002\000" +
    "\032\007\024\022\145\052\014\054\143\056\054\057\053" +
    "\060\041\061\047\062\055\063\043\065\044\067\037\001" +
    "\002\000\004\064\uffdb\001\002\000\004\014\150\001\002" +
    "\000\030\005\005\006\025\007\024\010\013\011\012\013" +
    "\017\016\023\046\007\047\004\050\011\052\014\001\002" +
    "\000\006\015\152\017\153\001\002\000\044\002\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\046\uffe0\047\uffe0\050\uffe0\051" +
    "\uffe0\052\uffe0\066\uffe0\001\002\000\004\015\154\001\002" +
    "\000\044\002\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\015\uffdf\016\uffdf\017\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\051\uffdf\052\uffdf\066\uffdf\001\002\000" +
    "\030\007\024\052\014\054\040\056\054\057\053\060\041" +
    "\061\047\062\055\063\043\065\044\067\037\001\002\000" +
    "\030\007\uffa1\052\uffa1\054\uffa1\056\uffa1\057\uffa1\060\uffa1" +
    "\061\uffa1\062\uffa1\063\uffa1\065\uffa1\067\uffa1\001\002\000" +
    "\030\007\uffa6\052\uffa6\054\uffa6\056\uffa6\057\uffa6\060\uffa6" +
    "\061\uffa6\062\uffa6\063\uffa6\065\uffa6\067\uffa6\001\002\000" +
    "\030\007\024\052\014\054\040\056\054\057\053\060\041" +
    "\061\047\062\055\063\043\065\044\067\037\001\002\000" +
    "\030\007\uffa5\052\uffa5\054\uffa5\056\uffa5\057\uffa5\060\uffa5" +
    "\061\uffa5\062\uffa5\063\uffa5\065\uffa5\067\uffa5\001\002\000" +
    "\030\007\uffa2\052\uffa2\054\uffa2\056\uffa2\057\uffa2\060\uffa2" +
    "\061\uffa2\062\uffa2\063\uffa2\065\uffa2\067\uffa2\001\002\000" +
    "\030\007\uffa4\052\uffa4\054\uffa4\056\uffa4\057\uffa4\060\uffa4" +
    "\061\uffa4\062\uffa4\063\uffa4\065\uffa4\067\uffa4\001\002\000" +
    "\030\007\uffa3\052\uffa3\054\uffa3\056\uffa3\057\uffa3\060\uffa3" +
    "\061\uffa3\062\uffa3\063\uffa3\065\uffa3\067\uffa3\001\002\000" +
    "\010\020\100\021\101\064\uffdc\001\002\000\024\020\uffcf" +
    "\021\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\064\uffdd\001\002\000\044\002\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7" +
    "\066\ufff7\001\002\000\032\002\001\005\005\006\025\007" +
    "\024\010\013\011\012\013\017\016\023\046\007\047\004" +
    "\050\011\052\014\001\002\000\004\052\014\001\002\000" +
    "\046\007\uffa7\020\uffa7\021\uffa7\023\uffa7\024\uffa7\025\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\053\uffa7\063\uffa7\064\uffa7\065" +
    "\uffa7\066\uffa7\071\uffa7\072\uffa7\074\uffa7\075\uffa7\001\002" +
    "\000\044\002\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011" +
    "\uffed\012\uffed\013\uffed\015\uffed\016\uffed\017\uffed\046\uffed" +
    "\047\uffed\050\uffed\051\uffed\052\uffed\066\uffed\001\002\000" +
    "\010\020\100\021\101\071\175\001\002\000\044\002\uffee" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\015\uffee\016\uffee\017\uffee\046\uffee\047\uffee\050\uffee" +
    "\051\uffee\052\uffee\066\uffee\001\002\000\004\012\177\001" +
    "\002\000\044\002\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\015\uffe9\016\uffe9\017\uffe9\046" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\066\uffe9\001\002" +
    "\000\020\024\uffbd\052\uffbd\053\uffbd\064\uffbd\066\uffbd\071" +
    "\uffbd\072\uffbd\001\002\000\016\052\uffc8\053\uffc8\064\uffc8" +
    "\066\uffc8\071\uffc8\072\uffc8\001\002\000\004\025\223\001" +
    "\002\000\016\052\uffc7\053\uffc7\064\uffc7\066\uffc7\071\uffc7" +
    "\072\uffc7\001\002\000\020\024\uffba\052\uffba\053\uffba\064" +
    "\uffba\066\uffba\071\uffba\072\uffba\001\002\000\020\024\uffbe" +
    "\052\uffbe\053\uffbe\064\uffbe\066\uffbe\071\uffbe\072\uffbe\001" +
    "\002\000\016\052\uffc6\053\uffc6\064\uffc6\066\uffc6\071\uffc6" +
    "\072\uffc6\001\002\000\004\025\216\001\002\000\020\024" +
    "\uffbb\052\uffbb\053\uffbb\064\uffbb\066\uffbb\071\uffbb\072\uffbb" +
    "\001\002\000\004\052\014\001\002\000\020\024\uffbc\052" +
    "\uffbc\053\uffbc\064\uffbc\066\uffbc\071\uffbc\072\uffbc\001\002" +
    "\000\020\024\uffbf\052\uffbf\053\uffbf\064\uffbf\066\uffbf\071" +
    "\uffbf\072\uffbf\001\002\000\004\071\215\001\002\000\044" +
    "\002\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4\046\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\052\ufff4\066\ufff4\001\002\000\020\035" +
    "\200\036\212\037\210\042\204\043\213\044\205\045\220" +
    "\001\002\000\004\024\222\001\002\000\004\024\221\001" +
    "\002\000\016\052\uffc0\053\uffc0\064\uffc0\066\uffc0\071\uffc0" +
    "\072\uffc0\001\002\000\016\052\uffc1\053\uffc1\064\uffc1\066" +
    "\uffc1\071\uffc1\072\uffc1\001\002\000\020\035\200\036\212" +
    "\037\210\042\204\043\213\044\205\045\225\001\002\000" +
    "\004\072\233\001\002\000\004\072\226\001\002\000\020" +
    "\035\200\036\212\037\210\042\204\043\213\044\205\045" +
    "\230\001\002\000\004\024\232\001\002\000\004\024\231" +
    "\001\002\000\016\052\uffc4\053\uffc4\064\uffc4\066\uffc4\071" +
    "\uffc4\072\uffc4\001\002\000\016\052\uffc3\053\uffc3\064\uffc3" +
    "\066\uffc3\071\uffc3\072\uffc3\001\002\000\020\035\200\036" +
    "\212\037\210\042\204\043\213\044\205\045\235\001\002" +
    "\000\004\024\237\001\002\000\004\024\236\001\002\000" +
    "\016\052\uffc2\053\uffc2\064\uffc2\066\uffc2\071\uffc2\072\uffc2" +
    "\001\002\000\016\052\uffc5\053\uffc5\064\uffc5\066\uffc5\071" +
    "\uffc5\072\uffc5\001\002\000\024\035\200\036\212\037\210" +
    "\040\207\041\202\042\204\043\213\044\205\052\014\001" +
    "\002\000\030\007\024\052\014\054\040\056\054\057\053" +
    "\060\041\061\047\062\055\063\043\065\044\067\037\001" +
    "\002\000\010\020\100\021\101\071\243\001\002\000\044" +
    "\002\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\013\ufffc\015\ufffc\016\ufffc\017\ufffc\046\ufffc\047\ufffc" +
    "\050\ufffc\051\ufffc\052\ufffc\066\ufffc\001\002\000\006\053" +
    "\253\071\252\001\002\000\006\053\247\071\246\001\002" +
    "\000\044\002\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\013\ufffb\015\ufffb\016\ufffb\017\ufffb\046\ufffb" +
    "\047\ufffb\050\ufffb\051\ufffb\052\ufffb\066\ufffb\001\002\000" +
    "\030\007\024\052\014\054\040\056\054\057\053\060\041" +
    "\061\047\062\055\063\043\065\044\067\037\001\002\000" +
    "\010\020\100\021\101\071\251\001\002\000\044\002\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013" +
    "\ufff9\015\ufff9\016\ufff9\017\ufff9\046\ufff9\047\ufff9\050\ufff9" +
    "\051\ufff9\052\ufff9\066\ufff9\001\002\000\044\002\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\015\ufffa\016\ufffa\017\ufffa\046\ufffa\047\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\066\ufffa\001\002\000\030\007\024\052\014" +
    "\054\040\056\054\057\053\060\041\061\047\062\055\063" +
    "\043\065\044\067\037\001\002\000\010\020\100\021\101" +
    "\071\255\001\002\000\044\002\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\066" +
    "\ufff8\001\002\000\004\065\257\001\002\000\004\052\014" +
    "\001\002\000\004\074\264\001\002\000\004\066\262\001" +
    "\002\000\004\071\263\001\002\000\044\002\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8" +
    "\052\uffe8\066\uffe8\001\002\000\024\035\200\036\212\037" +
    "\210\040\207\041\202\042\204\043\213\044\205\052\014" +
    "\001\002\000\010\064\uffe7\066\uffe7\072\271\001\002\000" +
    "\010\064\uffe6\066\uffe6\072\267\001\002\000\004\052\014" +
    "\001\002\000\006\064\uffe4\066\uffe4\001\002\000\004\052" +
    "\014\001\002\000\006\064\uffe5\066\uffe5\001\002\000\004" +
    "\071\274\001\002\000\044\002\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\066" +
    "\ufff6\001\002\000\004\063\276\001\002\000\004\052\014" +
    "\001\002\000\004\064\300\001\002\000\004\065\301\001" +
    "\002\000\030\005\005\006\025\007\024\010\013\011\012" +
    "\013\017\016\023\046\007\047\004\050\011\052\014\001" +
    "\002\000\032\005\005\006\025\007\024\010\013\011\012" +
    "\013\017\016\023\046\007\047\004\050\011\052\014\066" +
    "\303\001\002\000\046\002\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\066\uffe3" +
    "\074\304\001\002\000\022\035\200\036\212\037\210\040" +
    "\207\041\202\042\204\043\213\044\205\001\002\000\004" +
    "\071\306\001\002\000\044\002\uffe2\005\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\066" +
    "\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\026\002\017\003\014\004\025\005\027\011" +
    "\020\013\026\014\005\016\030\017\015\032\007\001\001" +
    "\000\004\032\274\001\001\000\004\032\272\001\001\000" +
    "\002\001\001\000\004\032\255\001\001\000\002\001\001" +
    "\000\012\020\200\021\202\022\205\030\210\001\001\000" +
    "\020\005\175\011\020\013\026\014\005\016\030\017\015" +
    "\032\007\001\001\000\022\006\173\010\050\017\041\023" +
    "\045\025\044\027\047\031\051\032\035\001\001\000\002" +
    "\001\001\000\022\004\167\005\027\011\020\013\026\014" +
    "\005\016\030\017\015\032\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\006\122\010\050" +
    "\017\041\023\045\025\044\027\047\031\051\032\035\001" +
    "\001\000\022\006\034\010\050\017\041\023\045\025\044" +
    "\027\047\031\051\032\035\001\001\000\022\003\031\005" +
    "\032\011\020\013\026\014\005\016\030\017\015\032\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\033\005\027\011\020\013\026\014\005" +
    "\016\030\017\015\032\007\001\001\000\002\001\001\000" +
    "\020\005\032\011\020\013\026\014\005\016\030\017\015" +
    "\032\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\104\027\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\075\010\050\017" +
    "\041\023\045\025\044\027\047\031\051\032\035\001\001" +
    "\000\006\024\066\027\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\027\056\031\060\032\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\027\062\031\064\032\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\072\001\001\000\002\001\001\000\006\024" +
    "\074\027\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\102\010\050\017\041\023" +
    "\045\025\044\027\047\031\051\032\035\001\001\000\022" +
    "\006\101\010\050\017\041\023\045\025\044\027\047\031" +
    "\051\032\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\114\027\115\001\001" +
    "\000\004\027\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\126\007\127\010\050\017\041\023" +
    "\045\025\044\027\047\031\051\032\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\126\007\132\010\050\017\041\023\045\025\044\027\047" +
    "\031\051\032\035\001\001\000\002\001\001\000\022\004" +
    "\134\005\027\011\020\013\026\014\005\016\030\017\015" +
    "\032\007\001\001\000\020\005\032\011\020\013\026\014" +
    "\005\016\030\017\015\032\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\141\010" +
    "\050\012\143\017\041\023\045\025\044\027\047\031\051" +
    "\032\035\001\001\000\004\033\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\141\010\050\012\145" +
    "\017\041\023\045\025\044\027\047\031\051\032\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\150" +
    "\011\020\013\026\014\005\016\030\017\015\032\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\165\010\050\017\041\023" +
    "\045\025\044\027\047\031\051\032\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\164\010\050\017" +
    "\041\023\045\025\044\027\047\031\051\032\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\032\011\020\013\026\014\005\016" +
    "\030\017\015\032\007\001\001\000\004\032\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\200\021\202\022" +
    "\205\030\244\032\243\001\001\000\022\006\241\010\050" +
    "\017\041\023\045\025\044\027\047\031\051\032\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\247\010" +
    "\050\017\041\023\045\025\044\027\047\031\051\032\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\253\010\050\017\041\023\045\025\044" +
    "\027\047\031\051\032\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\260\032\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\200\021\202\022\205" +
    "\030\265\032\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\267\032\257\001\001\000\002\001\001" +
    "\000\006\015\271\032\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\276\032\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\301\005\027\011\020\013\026\014\005" +
    "\016\030\017\015\032\007\001\001\000\020\005\032\011" +
    "\020\013\026\014\005\016\030\017\015\032\007\001\001" +
    "\000\002\001\001\000\012\020\200\021\202\022\205\030" +
    "\304\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors;

  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    lexer = lex;
  }

  public void syntax_error(Symbol current_token) {
    syntaxErrors = true;
    report_error("Syntax error at line " + (current_token.left+1) + ", column "
    + current_token.right + "\n", null);
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= main function_inner 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= function_inner main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= function_inner main function_inner 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= identifier ASSIGN expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= identifier COLON all_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= identifier COLON identifier SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= identifier COLON all_types ASSIGN expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= identifier COLON identifier ASSIGN expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= function_call SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= READ identifier SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= PRINT expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= ALIAS all_types identifier SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= typedef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= funcdef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= cond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= RETURN expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // main ::= MAIN LBRACE function_inner RBRACE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function_inner ::= stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_inner",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function_inner ::= function_inner stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_inner",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // loop ::= LOOP stmt POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // typedef ::= TDEF identifier LBRACE typedef_inner RBRACE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedef",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // typedef_inner ::= identifier COLON identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedef_inner",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // typedef_inner ::= identifier COLON all_types 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedef_inner",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // typedef_inner ::= identifier COLON identifier COMMA typedef_inner 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedef_inner",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // typedef_inner ::= identifier COLON all_types COMMA typedef_inner 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedef_inner",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcdef ::= FDEF identifier LPAREN typedef_inner RPAREN LBRACE function_inner RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdef",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcdef ::= FDEF identifier LPAREN typedef_inner RPAREN LBRACE function_inner RBRACE COLON all_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdef",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function_call ::= QMARK expr QMARK IDENTIFIER LPAREN expr_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cond ::= IF LPAREN cond_inner RPAREN THEN stmt FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cond ::= IF LPAREN cond_inner RPAREN THEN stmt ELSE FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cond_inner ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_inner",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cond_inner ::= expr BBINOP expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_inner",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cond_inner ::= expr comp expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_inner",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cond_inner ::= BUNOP cond_inner 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_inner",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr_list ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr_list ::= expr COMMA expr_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr BINOP expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= seq_concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // term ::= all_literals 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // term ::= dict_literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // term ::= seq_literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term ::= identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= expr BBINOP expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // all_literals ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_literals",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // all_literals ::= FLOATING_POINT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_literals",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // all_literals ::= RATIONAL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_literals",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // all_literals ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_literals",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // all_literals ::= CHARACTER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_literals",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // all_literals ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_literals",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // all_types ::= dict_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // all_types ::= seq_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // all_types ::= primitive 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("all_types",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dict_type ::= DICT LT primitive COMMA primitive GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dict_type ::= DICT LT TOP COMMA TOP GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dict_type ::= DICT LT TOP COMMA primitive GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dict_type ::= DICT LT primitive COMMA TOP GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // seq_type ::= SEQ LT primitive GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // seq_type ::= SEQ LT TOP GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // primitive ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // primitive ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // primitive ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // primitive ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // primitive ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // primitive ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // dict_literal ::= LBRACE dict_literal_inner RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_literal",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dict_literal ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_literal",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // dict_literal_inner ::= all_literals COLON all_literals 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_literal_inner",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // dict_literal_inner ::= all_literals COLON all_literals COMMA dict_literal_inner 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_literal_inner",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // seq_literal ::= LBRACK seq_literal_inner RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // seq_literal ::= LBRACK all_literals COLON all_literals RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // seq_literal ::= LBRACK all_literals COLON RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // seq_literal ::= LBRACK COLON all_literals RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // seq_literal ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // seq_literal_inner ::= all_literals 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_literal_inner",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // seq_literal_inner ::= all_literals COMMA seq_literal_inner 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_literal_inner",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // seq_concat ::= identifier COLONCOLON identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_concat",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // seq_concat ::= identifier COLONCOLON all_literals 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_concat",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // seq_concat ::= all_literals COLONCOLON identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_concat",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // seq_concat ::= all_literals COLONCOLON all_literals 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_concat",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // seq_concat ::= identifier COLONCOLON seq_concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_concat",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // seq_concat ::= all_literals COLONCOLON seq_concat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_concat",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // identifier ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // identifier ::= IDENTIFIER DOT identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // comp ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // comp ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // comp ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // comp ::= LEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // comp ::= GEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // comp ::= NEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
