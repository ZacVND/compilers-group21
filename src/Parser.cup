import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;

parser code {:
  public boolean syntaxErrors;

  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    lexer = lex;
  }

  public void syntax_error(Symbol current_token) {
    syntaxErrors = true;
    report_error("Syntax error at line " + (current_token.left+1) + ", column "
    + current_token.right + ": ", null);
  }

:};

terminal IN;

// IO
terminal READ, PRINT;

// Function
terminal QMARK;
terminal RETURN;

// Conditional Statements
terminal LOOP, POOL;
terminal IF, THEN, FI;
terminal BREAK, ELSE;  // Conditional Statements - Control

// Logical Operators
terminal EQ, GT, LT, LEQ, GEQ, NEQ;
terminal NOT, AND, OR, IMPLICATION;

// Types
terminal TYPE;

// Definitions
terminal TDEF, FDEF; // Define type & functions
terminal ALIAS;
terminal MAIN;
terminal IDENTIFIER;
terminal ASSIGN;

// Literals
terminal BOOLEAN_LITERAL;
terminal NULL_LITERAL;
terminal INTEGER_LITERAL, FLOATING_POINT_LITERAL, RATIONAL_LITERAL;  // Numbers
terminal STRING_LITERAL, CHARACTER_LITERAL;  // String & Char

// Separators
terminal LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK;
terminal SEMICOLON;
terminal COMMA;
terminal DOT;

// Dictionary & Sequence
terminal COLON, COLONCOLON;

// Operators
terminal PLUS, MINUS, MULT, DIV, EXP;


// TYPES
non terminal INT, FLOAT, RAT;
non terminal SEQ, DICT;
non terminal BOOLEAN;
non terminal CHAR;
non terminal STRING;
non terminal TOP;


// Non Terminals
// Literals
non terminal all_literals, number_literals, pos_number_literals, dict_literal, seq_literal;
non terminal dict_literal_inner, seq_literal_term, seq_literal_inner;

// Types
non terminal all_types, primitive, identifier;

// Sequence
non terminal seq_concat, seq_concat_term;
non terminal program, main;

// Controls
non terminal conditional_statement, boolean_statement, loop_inner;

// Atoms
non terminal stmt, main_stmt, func_stmt, expr_list, expr, term;

// User definitions and functions
non terminal typedef, funcdef, funcdef_inner, function_call;
non terminal function_inner, typedef_inner;


declaration::= DICT LT TYPE COMMA TYPE TYPE RT
    | SEQ LT TYPE RT
    | TYPE
    ;


