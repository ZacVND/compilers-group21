import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;

parser code {:
  public boolean syntaxErrors = false;

  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    lexer = lex;
  }

  public void syntax_error(Symbol cur_token){
  	System.err.println("Syntax error at "+cur_token);
  }


:};

terminal IN;

// IO
terminal READ, PRINT;

// Conditional Statements
terminal LOOP, POOL;
terminal IF, THEN, FI;
terminal BREAK, ELSE;  // Conditional Statements - Control
terminal BINOP, BBINOP, BUNOP; // BINOP = binary op, BBINOP = logical op, BUNOP = unary op
terminal RETURN;

// Logical Operators
terminal EQ, GT, LT, LEQ, GEQ, NEQ;
terminal NOT, AND, OR, IMPLICATION;
terminal TYPE;
terminal COMP;
terminal QMARK;

// Types
terminal INT, FLOAT, RAT;
terminal SEQ, DICT;
terminal BOOLEAN;
terminal CHAR, STRING;
terminal TOP;

// Definitions
terminal TDEF, FDEF; // Define type & functions
terminal ALIAS;
terminal MAIN;
terminal IDENTIFIER;
terminal ASSIGN;

// Literals
terminal BOOLEAN_LITERAL;
terminal NULL_LITERAL;
terminal INTEGER_LITERAL, FLOATING_POINT_LITERAL, RATIONAL_LITERAL;  // Numbers
terminal STRING_LITERAL, CHARACTER_LITERAL;  // String & Char

// Separators
terminal LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK;
terminal SEMICOLON;
terminal COMMA;
terminal DOT;

// Dictionary & Sequence
terminal COLON, COLONCOLON;

// Operators
terminal PLUS, MINUS, MULT, DIV, EXP;

// Non Terminals
non terminal program;
non terminal main, function_inner, stmt, expr, term, cond, cond_inner, loop;
non terminal typedef, typedef_inner, funcdef;
non terminal dict_type, seq_type, primitive, dict_literal, dict_literal_inner, seq_literal, seq_literal_inner, all_literals, all_types, seq_concat;


// Precedences
precedence left ASSIGN;
precedence left BINOP, BUNOP, BBINOP;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left EXP;

program ::= main function_inner | function_inner main | function_inner main function_inner | main;

stmt ::= IDENTIFIER ASSIGN expr SEMICOLON //assignment
    | IDENTIFIER COLON all_types SEMICOLON //declaration
    | IDENTIFIER COLON IDENTIFIER SEMICOLON //declaration
    | IDENTIFIER COLON all_types ASSIGN expr SEMICOLON //initialisation
    | IDENTIFIER COLON IDENTIFIER ASSIGN expr SEMICOLON //initialisation
    | READ IDENTIFIER SEMICOLON //input
    | PRINT expr SEMICOLON //output
    | ALIAS all_types IDENTIFIER SEMICOLON //alias
    | BREAK
    | typedef
    | funcdef
    | cond //conditional - if then, if then else
    | loop
    | RETURN SEMICOLON
    ;

main ::= MAIN LBRACE function_inner RBRACE SEMICOLON
    ;

function_inner ::= stmt
    | function_inner stmt
    ;

loop ::= LOOP stmt POOL
    ;

typedef ::= TDEF IDENTIFIER LBRACE typedef_inner RBRACE SEMICOLON
    ;

typedef_inner ::= IDENTIFIER COLON IDENTIFIER
    | IDENTIFIER COLON all_types
    | IDENTIFIER COLON IDENTIFIER COMMA typedef_inner
    | IDENTIFIER COLON all_types COMMA typedef_inner
    ;

funcdef ::= FDEF IDENTIFIER LPAREN typedef_inner RPAREN LBRACE function_inner RBRACE
    | FDEF IDENTIFIER LPAREN typedef_inner RPAREN LBRACE function_inner RBRACE COLON all_types SEMICOLON
    ;

cond ::= IF LPAREN cond_inner RPAREN THEN stmt FI
    | IF LPAREN cond_inner RPAREN THEN stmt ELSE FI
    ;

cond_inner ::= BOOLEAN_LITERAL
    | expr BBINOP expr
    | expr BINOP expr
    | BUNOP cond_inner
    ;

expr ::= expr BINOP expr
    | LPAREN expr RPAREN
    | seq_concat
    | term
    ;

term ::= all_literals
    | dict_literal
    | seq_literal
    | IDENTIFIER
    ;

all_literals ::= INTEGER_LITERAL
    | FLOATING_POINT_LITERAL
    | RATIONAL_LITERAL
    | STRING_LITERAL
    | CHARACTER_LITERAL
    | BOOLEAN_LITERAL
    ;

all_types ::= dict_type
    | seq_type
    | primitive
    ;

dict_type ::= DICT LT primitive COMMA primitive GT
    | DICT LT TOP COMMA TOP GT
    | DICT LT TOP COMMA primitive GT
    | DICT LT primitive COMMA TOP GT
    ;

seq_type ::= SEQ LT primitive GT
    | SEQ LT TOP GT
    ;

primitive ::= CHAR
    | INT
    | FLOAT
    | RAT
    | BOOLEAN
    | STRING
    ;

dict_literal ::= LBRACE dict_literal_inner RBRACE
    | LBRACE RBRACE
    ;

dict_literal_inner ::= all_literals COLON all_literals
    | all_literals COLON all_literals COMMA dict_literal_inner
    ;

seq_literal ::= LBRACK seq_literal_inner RBRACK
    | LBRACK all_literals COLON all_literals RBRACK
    | LBRACK all_literals COLON RBRACK
    | LBRACK COLON all_literals RBRACK
    | LBRACK RBRACK
    ;

seq_literal_inner ::= all_literals
    | all_literals COMMA seq_literal_inner
    ;

seq_concat ::= IDENTIFIER COLONCOLON IDENTIFIER
    | IDENTIFIER COLONCOLON all_literals
    | all_literals COLONCOLON IDENTIFIER
    | all_literals COLONCOLON all_literals
    | IDENTIFIER COLONCOLON seq_concat
    | all_literals COLONCOLON seq_concat
    ;
